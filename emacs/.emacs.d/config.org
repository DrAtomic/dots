* startup
Use-package
#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" ."https://melpa.org/packages/") t)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
* loadpath
#+begin_src emacs-lisp
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp")
  (add-to-list 'load-path "~/.emacs.d/packages/highlight")
  (add-to-list 'load-path "~/.emacs.d/packages/facemenu")
  (add-to-list 'load-path "~/.emacs.d/packages/eyedropper")
  (add-to-list 'load-path "~/.emacs.d/packages/hexrgb")
  (add-to-list 'load-path "~/.emacs.d/packages/hl-wrapper")
#+end_src
* orgmode
#+begin_src emacs-lisp
  (use-package org
    :ensure t)
#+end_src
** org agenda
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/Notes/daily/"))
  (setq org-agenda-timegrid-use-ampm t)
  (global-set-key (kbd "C-c l") #'org-store-link)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)
  (setq org-default-notes-file  "~/Notes/captures.org")
#+end_src
** org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory  "~/Notes")
    (org-roam-complete-everywhere t)
    :bind
    (("C-c n l" . org-roam-buffer-toggle)
     ("C-c n f" . org-roam-node-find)
     ("C-c n i" . org-roam-node-insert)
     ("C-c n d t" . org-roam-dailies-goto-today)
     ("C-c n d m" . org-roam-dailies-goto-tomorrow)
     ("C-c n d d" . org-roam-dailies-goto-date)
     :map org-mode-map
     ("C-M-i"   . completion-at-point))
    :config
    (org-roam-setup))
#+end_src
** pdf
#+begin_src emacs-lisp
  (push '("\\.pdf\\'" . emacs) org-file-apps)
#+end_src
** bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :init
    (setq org-bullets-bullet-list
	  '( "◉" "●" "○" "•"))
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** GTD
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
	'(("g" "GTD view"
	   ((agenda)
	    (todo "NEXT" ((org-agenda-overriding-header "Next actions:")))
	    (todo "WAITING" ((org-agenda-overriding-header "Waiting on:")))
	    (todo "DONE" ((org-agenda-overriding-header "Completed items:")))
	    (tags "projects" ((org-agenda-overriding-header "Projects in progress:")))))))
#+end_src
** flyspell
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-flyspell)
  (add-hook 'markdown-mode-hook 'turn-on-flyspell)
#+end_src
* theme
#+begin_src emacs-lisp
  (use-package gruber-darker-theme
    :ensure t
    :config
    (load-theme 'gruber-darker t))
  (set-face-attribute 'default nil :font "DejaVu Sans Mono" :height 190)
#+end_src
* projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

* dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents . 5)
			    (projects . 5))))
#+END_SRC
* tmp
set autosave fiels to .tmp folder
#+BEGIN_SRC emacs-lisp
  (setq temporary-file-directory "~/.tmp/")
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))
#+END_SRC
* pretty emacs
remove ugly things and make things pretty
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
  (setq ring-bell-function 'ignore)
  (setq scroll-conservatively 100)
#+END_SRC

* config
visit and reload config
** visit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** todo
#+BEGIN_SRC emacs-lisp
  (defun todo-visit ()
    (interactive)
    (find-file "~/Notes/next.org"))
  (global-set-key (kbd "C-c t") 'todo-visit)
#+END_SRC
* window
** split window
split window and follow
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** switch window
#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :ensure t
  :config
  (setq switch-window-input-style 'minibuffer)
  (setq switch-window-increase 4)
  (setq switch-window-threshold 2)
  (setq switch-window-shortcut-style 'qwerty)
  (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l"))
  :bind
  ([remap other-window] . switch-window))
#+END_SRC

* which key
lint for emacs
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
* delimiters
** electric pairs
wraps delimiters
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\{ . ?\})
			      (?\[ . ?\])
			      (?\" . ?\")
			      (?\( . ?\))
			      ))
  (electric-pair-mode 1)
#+END_SRC
** rainbow delimiters
   color delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (progn
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
#+END_SRC
** paren mode
 #+begin_src emacs-lisp
   (show-paren-mode 1)
 #+end_src
** paredit
a bit annoying a bit nice
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook #'paredit-mode)
    ;; enable in the *scratch* buffer
    (add-hook 'lisp-interaction-mode-hook #'paredit-mode)
    (add-hook 'ielm-mode-hook #'paredit-mode)
    (add-hook 'lisp-mode-hook #'paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode)
    (add-hook 'racket-mode-hook 'enable-paredit-mode)
    (add-hook 'scheme-mode-hook #'paredit-mode))
#+END_SRC

* multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind ( "C-c m C-c m" . mc/edit-lines)
    ("C->" . mc/mark-next-like-this)
    ("C-<" . mc/mark-previous-like-this)
    ("C-c m c" . mc/mark-all-like-this))
#+END_SRC

* helm
its helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)
    ("M-x" . 'helm-M-x)
    :config
    (set-face-attribute 'helm-selection nil
			:background "darkgreen"
			:foreground "yellow")
    (setq helm-autoresize-max-height 0
	  helm-autoresize-min-height 40
	  helm-M-x-fuzzy-match t
	  helm-buffers-fuzzy-matching t
	  helm-recentf-fuzzy-match t
	  helm-semantic-fuzzy-match t
	  helm-imenu-fuzzy-match t
	  helm-split-window-in-side-p nil
	  helm-move-to-line-cycle-in-source nil
	  helm-ff-search-library-in-sexp t
	  helm-scroll-amount 8
	  helm-echo-input-in-header-line t
	  history-delete-duplicates t)
    :init
    (helm-mode 1)
    (helm-autoresize-mode 1)
    (define-key helm-find-files-map (kbd "C-b") 'helm-find-files-up-one-level)
    (define-key helm-find-files-map (kbd "C-f") 'helm-execute-persistent-action))
#+END_SRC

* word and line wrap
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode 1)
#+END_SRC
* company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous))
#+END_SRC
* babel langs
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
  (add-to-list 'org-structure-template-alist
	       '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist
	       '("p" . "src python")
	       (org-babel-do-load-languages
		'org-babel-load-languages
		'((dot . t))))
  (add-to-list 'org-structure-template-alist
	       '("t" . "src tcl")
	       (org-babel-do-load-languages
		'org-babel-load-languages
		'((dot . t))))
#+END_SRC
* magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))
#+end_src

* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t)

  (use-package yasnippet-snippets
    :ensure t)

  (yas-reload-all)
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)
  (yas-global-mode 1)

  (use-package common-lisp-snippets
    :ensure t)
#+END_SRC

* eglot
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t)

  (setq eldoc-echo-area-use-multiline-p nil)
#+end_src
* line number
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
  (setq display-line-numbers-width-start t)
#+end_src
* reveal
#+begin_src emacs-lisp
  (use-package ox-reveal
    :ensure t)
  (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
  (setq org-reveal-mathjax t)
  (use-package htmlize
    :ensure t)
#+end_src

* visual regexp
#+begin_src emacs-lisp
  (use-package visual-regexp
    :ensure t)
#+end_src
* expand region
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+end_src
* microlisp
#+begin_src emacs-lisp
  (setq ulisp-term-buffer-name "/dev/ttyUSB0")

  (defun ulisp-eval-last-expression-in-term ()
    (interactive)
    (let ((expr (buffer-substring-no-properties
		 (save-excursion (backward-sexp) (point))
		 (point))))
      (with-current-buffer ulisp-term-buffer-name
	(insert expr)
	(term-send-input))))

  (global-set-key (kbd "C-x e") 'ulisp-eval-last-expression-in-term)
  (defun setup-ulisp-workspace ()
    (interactive)
    (split-window-right)
    (other-window 1)
    (serial-term "/dev/ttyUSB0" 9600)
    (term-line-mode)
    (other-window 1))
#+end_src
* tramp
#+begin_src emacs-lisp
(setq tramp-terminal-type "dumb")
#+end_src

* whitespace
#+begin_src emacs-lisp
  (setq whitespace-line-column 250)
  (setq whitespace-display-mappings
	'((space-mark   ?\    [?\xB7]     [?.])	; space
	  (space-mark   ?\xA0 [?\xA4]     [?_])	; hard space
	  (tab-mark     ?\t   [?\xBB ?\t] [?\\ ?\t])))
  
  (defun whitespace-handling ()
    (interactive)
    (whitespace-mode 1)
    (add-to-list 'write-file-functions 'delete-trailing-whitespace))
#+end_src
* cmake
#+begin_src emacs-lisp
  (use-package cmake-mode
    :ensure t)
#+end_src
* flymake
#+begin_src emacs-lisp
  (global-unset-key (kbd "M-m"))
  (use-package flymake
    :ensure t
    :config
    (define-key flymake-mode-map (kbd "M-m n") 'flymake-goto-next-error)
    (define-key flymake-mode-map (kbd "M-m p") 'flymake-goto-prev-error))
#+end_src
* ansi-colors
#+begin_src emacs-lisp
  (use-package ansi-color
    :ensure t)

  (defun colorize-compilation-buffer ()
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max))))

  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
#+end_src
* duplicate-line
#+begin_src emacs-lisp
  (defun rc/duplicate-line ()
    "Duplicate current line"
    (interactive)
    (let ((column (- (point) (point-at-bol)))
	  (line (let ((s (thing-at-point 'line t)))
		  (if s (string-remove-suffix "\n" s) ""))))
      (move-end-of-line 1)
      (newline)
      (insert line)
      (move-beginning-of-line 1)
      (forward-char column)))

  (global-set-key (kbd "C-,") 'rc/duplicate-line)
#+end_src
* compile
#+begin_src emacs-lisp
  (global-set-key (kbd "<f5>") 'compile)
  (setq compilation-scroll-output 'first-error)
  (add-hook 'compilation-finish-functions 'switch-to-buffer-other-window 'compilation)
#+end_src
* highlight
#+begin_src emacs-lisp
  (require 'facemenu+)
  (require 'highlight)
  (require 'hl-wrapper)
  (global-set-key (kbd "C-c h b") 'hl-wrapper-highlight-region-blue)
  (global-set-key (kbd "C-c h r") 'hl-wrapper-highlight-region-red)
  (global-set-key (kbd "C-c h y") 'hl-wrapper-highlight-region-yellow)
  (global-set-key (kbd "C-c h g") 'hl-wrapper-highlight-region-green)
  (global-set-key (kbd "C-c h u") 'hl-wrapper-unhighlight-region)
#+end_src
* mu4e
** message-view-patch
#+begin_src emacs-lisp
  (use-package message-view-patch
    :ensure t)
#+end_src
** mu4e
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :config
    (setq mu4e-change-filenames-when-moving t)
    (setq mu4e-update-interval 7200)
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/Mail")

    (setq mu4e-drafts-folder "/[Gmail]/Drafts")
    (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
    (setq mu4e-refile-folder "/[Gmail]/All Mail")
    (setq mu4e-trash-folder  "/[Gmail]/Trash"))
  (add-hook 'gnus-part-display-hook 'message-view-patch-highlight)
#+end_src
* vterm
#+BEGIN_SRC emacs-lisp
  (defun nolinum ()
    (display-line-numbers-mode -1))

  (unless (version< emacs-version "27.1")
    (use-package vterm
      :ensure t))

  (add-hook 'vterm-mode-hook 'nolinum)
#+END_SRC
* move-text
#+begin_src emacs-lisp
  (use-package move-text
    :ensure t
    :config
    (global-set-key (kbd "M-p") 'move-text-up)
    (global-set-key (kbd "M-n") 'move-text-down))
#+end_src
* languages
** python
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :ensure t
    :hook ((python-mode . pyvenv-mode)))

  (use-package elpy
    :ensure t
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable))

  (setq python-shell-completion-native-enable nil)
  (setq elpy-shell-use-project-root t )
  (setq elpy-rpc-virtualenv-path 'current)

  (setq elpy-shell-starting-directory (quote current-directory))

  (use-package pyenv-mode
    :ensure t)
					  ; set this to whichever you have
  (setenv "WORKON_HOME" "~/.conda/envs")
  (pyvenv-mode 1)
  (use-package company-jedi
    :ensure t
    :config
    (defun my/python-mode-hook ()
      (add-to-list 'company-backends 'company-jedi))
    (add-hook 'python-mode-hook 'my/python-mode-hook))
#+END_SRC
** latex
#+BEGIN_SRC emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq TeX-save-query nil)
  (setq org-latex-create-formula-image-program 'dvipng)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC
** lisp
#+begin_src emacs-lisp
  (use-package sly-asdf
    :ensure t)
  (use-package sly
    :ensure t)
  (setq inferior-lisp-program "/usr/local/bin/sbcl")
#+end_src
** markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src
** verilog
#+begin_src emacs-lisp
  (use-package verilog-mode
    :ensure t
    :config
    (setq verilog-auto-newline nil))
#+end_src
** C
#+begin_src emacs-lisp
  (setq c-default-style "linux")
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'c-mode-hook 'whitespace-handling)
  (add-hook 'c-mode-hook 'column-number-mode)
  (add-hook 'c-mode-hook (lambda () (c-toggle-comment-style -1)))
#+end_src
** markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src
