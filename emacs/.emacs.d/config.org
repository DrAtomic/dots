* startup
#+begin_src emacs-lisp
  (package-initialize)
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" ."https://melpa.org/packages/") t)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (unbind-key "C-x C-k")
  (add-to-list 'initial-frame-alist '(fullscreen . maximized))
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src
* treesit
#+begin_src emacs-lisp
  (use-package treesit-auto
    :ensure t
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src
* orgmode
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :bind
    (("C-c l" . org-store-link)
     ("C-c a" . org-agenda)
     ("C-c c" . org-capture))
    :hook
    ((org-mode . turn-on-flyspell))
    :custom
      ((org-agenda-files '("~/Documents/gtd/inbox.org" "~/Documents/gtd/projects.org" "~/Documents/gtd/schedule.org"))
      (org-agenda-timegrid-use-ampm t)

      (org-capture-templates '(("t" "Todo [inbox]" entry
				   (file+headline "~/Documents/gtd/inbox.org" "Tasks")
				   "* TODO %i%?")
				  ("s" "Schedule" entry
				   (file+headline "~/Documents/gtd/schedule.org" "Schedule")
				   "* %i%? \n SCHEDULED: %^T")))

      (org-refile-targets '(("~/Documents/gtd/projects.org" :maxlevel . 3)
			    ("~/Documents/gtd/someday.org" :level . 1)
			    ("~/Documents/gtd/schedule.org" :maxlevel . 2)))

      (org-default-notes-file  "~/Documents/gtd/inbox.org")

      (org-agenda-custom-commands
       '(("n" todo "TODO"
	  ((org-agenda-overriding-header "nexts")
	   (org-agenda-skip-function #'skip-all-but-first)))
	 ("h" "at home" tags-todo "@home"
	  ((org-agenda-overriding-header "Home")
	   (org-agenda-skip-function #'skip-all-but-first)))
	 ("e" "embedded" tags-todo "embedded"
	  ((org-agenda-overriding-header "Embedded")
	   (org-agenda-skip-function #'skip-all-but-first)))
	 ("s" "server" tags-todo "server"
	  ((org-agenda-overriding-header "Server")
	   (org-agenda-skip-function #'skip-all-but-first))))))
      :config
      (defun skip-all-but-first ()
	"skips all but first non-done"
	(let (should-skip-entry)
	  (unless (org-current-is-todo)
	    (setq should-skip-entry t))
	  (save-excursion
	    (while (and (not should-skip-entry) (org-goto-sibling t))
	      (when (org-current-is-todo)
		(setq should-skip-entry t))))
	  (when should-skip-entry
	    (or (outline-next-heading)
		(goto-char (point-max))))))

      (defun org-current-is-todo ()
	(string= "TODO" (org-get-todo-state))))
#+end_src
** org-roam
#+begin_src emacs-lisp
  (use-package dash
    :ensure t)
  (use-package f
    :ensure t)
  (use-package s
    :ensure t)
  (use-package emacsql
    :ensure t)
  (use-package org-roam
    :ensure t
    :after (dash f s org emacsql)
    :custom
    (org-roam-directory  "~/Notes")
    (org-roam-complete-everywhere t)
    :bind
    (("C-c n l" . org-roam-buffer-toggle)
     ("C-c n f" . org-roam-node-find)
     ("C-c n i" . org-roam-node-insert)
     ("C-c n d t" . org-roam-dailies-goto-today)
     ("C-c n d m" . org-roam-dailies-goto-tomorrow)
     ("C-c n d d" . org-roam-dailies-goto-date)
     :map org-mode-map
     ("C-M-i"   . completion-at-point))
    :config
    (org-roam-setup))
#+end_src
** bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :init
    (setq org-bullets-bullet-list
	  '( "◉" "●" "○" "•"))
    :hook
    ((org-mode . (lambda () (org-bullets-mode 1)))))
#+END_SRC
* theme
#+begin_src emacs-lisp
  (use-package zenburn-theme
    :load-path "./packages/zenburn"
    :ensure t
    :config
    (load-theme 'zenburn t)
    :custom-face
    (default ((nil (:font "DejaVu Sans Mono" :height 190)))))
#+end_src
* projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :bind
    (:map projectile-mode-map
	  ("C-c p" . projectile-command-map)))
    :config
    (projectile-mode 1)
#+end_src
* dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :custom
    ((dashboard-startup-banner 'logo)
     (dashboard-center-content t)
     (dashboard-items '((recents . 5)
			(projects . 5)))))
    :config
    (dashboard-setup-startup-hook)
#+END_SRC
* tmp
set autosave fiels to .tmp folder
#+BEGIN_SRC emacs-lisp
  (setq temporary-file-directory "~/.tmp/")
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))
#+END_SRC
* pretty emacs
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
  (setq ring-bell-function 'ignore)
  (setq scroll-conservatively 100)
#+END_SRC
* config
visit and reload config
** visit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** todo
#+BEGIN_SRC emacs-lisp
  (defun todo-visit ()
    (interactive)
    (find-file "~/Documents/gtd/inbox.org"))
  (global-set-key (kbd "C-c t") 'todo-visit)
#+END_SRC
* window
** split window
split window and follow
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** switch window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :custom
    ((switch-window-input-style 'minibuffer)
     (switch-window-increase 4)
     (switch-window-threshold 2)
     (switch-window-shortcut-style 'qwerty)
     (switch-window-qwerty-shortcuts
      '("a" "s" "d" "f" "j" "k" "l")))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC

* which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
* delimiters
** rainbow delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook
    ((prog-mode . rainbow-delimiters-mode)))
#+END_SRC
** paren mode
 #+begin_src emacs-lisp
   (show-paren-mode 1)
 #+end_src
** paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :hook
    ((emacs-lisp-mode . paredit-mode)
     (lisp-interaction-mode  . paredit-mode)
     (ielm-mode . paredit-mode)
     (lisp-mode . paredit-mode)
     (eval-expression-minibuffer-setup  . paredit-mode)))
#+END_SRC

* multiple cursors

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind ( "C-c m C-c m" . mc/edit-lines)
    ("C->" . mc/mark-next-like-this)
    ("C-<" . mc/mark-previous-like-this)
    ("C-c m c" . mc/mark-all-like-this))
#+END_SRC

* helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind
    (("C-x C-f" . 'helm-find-files)
     ("C-x C-b" . 'helm-buffers-list)
     ("M-x" . 'helm-M-x)
     :map helm-find-files-map
     ("C-b" . helm-find-files-up-one-level)
     ("C-f" . helm-execute-persistent-action))
    :custom-face
    (helm-selection ((nil (:background "darkgreen" :foreground "yellow"))))
    :custom
    ((helm-autoresize-max-height 0)
     (helm-autoresize-min-height 40)
     (helm-M-x-fuzzy-match t)
     (helm-buffers-fuzzy-matching t)
     (helm-recentf-fuzzy-match t)
     (helm-semantic-fuzzy-match t)
     (helm-imenu-fuzzy-match t)
     (helm-split-window-in-side-p nil)
     (helm-move-to-line-cycle-in-source nil)
     (helm-ff-search-library-in-sexp t)
     (helm-scroll-amount 8)
     (helm-echo-input-in-header-line t)
     (history-delete-duplicates t))
    :custom
    (helm-mode 1)
    (helm-autoresize-mode 1))
#+END_SRC

* word and line wrap
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode 1)
#+END_SRC
* company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :hook
    (after-init . global-company-mode)
    :bind (:map company-active-map
		("M-n" . nil)
		("M-n" . nil)
		("C-n" . company-select-next)
		("C-p" . company-select-previous)))
#+END_SRC
* babel langs
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
  (add-to-list 'org-structure-template-alist
	       '("el" . "src emacs-lisp")
	       (org-babel-do-load-languages
		'org-babel-load-languages
		'((emacs-lisp . t))))
  (add-to-list 'org-structure-template-alist
	       '("p" . "src python")
	       (org-babel-do-load-languages
		'org-babel-load-languages
		'((python . t))))
  (add-to-list 'org-structure-template-alist
	       '("cc" . "src c")
	       (org-babel-do-load-languages
		'org-babel-load-languages
		'((C . t))))
  (add-to-list 'org-structure-template-alist
	       '("sh" . "src bash")
	       (org-babel-do-load-languages
		'org-babel-load-languages
		'((shell . t))))

#+END_SRC

* yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :bind (:map yas-minor-mode-map
	   ("<tab>" . nil)
	   ("TAB" . nil)
	   ("<C-tab>" . yas-expand))
    :config
    (yas-reload-all)
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC
* magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :hook ((git-commit-setup . git-commit-turn-on-flyspell))
    :bind (("C-x g" . magit-status)))
#+end_src
* lsp
#+begin_src emacs-lisp
  (use-package lsp-mode
    ;; to stop the annoying inlay hints
    ;; .clangd
    ;; -------
    ;; InlayHints:
    ;;   Enabled: No
    ;; ---------
    :ensure t
    :hook
    (c-ts-mode . lsp)
    (c++-ts-mode . lsp)
    (lsp-mode . lsp-enable-which-key-integration)
    :custom
    ((eldoc-echo-area-use-multiline-p nil)
     (lsp-enable-indentation nil)
     (lsp-enable-on-type-formatting nil)
     (lsp-modeline-code-actions-enable nil)
     (lsp-modeline-diagnostics-enable nil)
     (lsp-diagnostics-provider :none)
     (lsp-ui-sidline-enable nil)
     (lsp-clients-clangd-args '("--header-insertion=never"))))

  (use-package lsp-ui
    :ensure t)

  (use-package helm-lsp
    :ensure t)

  (use-package dap-mode
    :ensure t
    :bind
    (("C-c d r" . dap-debug)
     ("C-c d b" . dap-breakpoint-toggle)
     ("C-c d h" . dap-hydra)))
  ;; M-x dap-cpptools-setup
  (require 'dap-cpptools)
#+end_src
* line number
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
  (setq display-line-numbers-width-start t)
#+end_src
* reveal
#+begin_src emacs-lisp
  (use-package ox-reveal
    :ensure t
    :custom
    (org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
    (org-reveal-mathjax t))

  (use-package htmlize
    :ensure t)
#+end_src

* expand region
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+end_src
* tramp
#+begin_src emacs-lisp
(setq tramp-terminal-type "dumb")
#+end_src

* whitespace
#+begin_src emacs-lisp
  (setq whitespace-line-column 250)
  (setq whitespace-display-mappings
	'((space-mark   ?\    [?\xB7]     [?.])	; space
	  (space-mark   ?\xA0 [?\xA4]     [?_])	; hard space
	  (tab-mark     ?\t   [?\xBB ?\t] [?\\ ?\t])))
  
  (defun whitespace-handling ()
    (interactive)
    (whitespace-mode 1))
#+end_src
* cmake
#+begin_src emacs-lisp
  (use-package cmake-mode
    :ensure t)
#+end_src
* flymake
#+begin_src emacs-lisp
  (global-unset-key (kbd "M-m"))
  (use-package flymake
    :ensure t
    :bind (:map flymake-mode-map
		("M-m n" . flymake-goto-next-error)
		("M-m p" . flymake-goto-prev-error)))
#+end_src
* ansi-colors
#+begin_src emacs-lisp
  (use-package ansi-color
    :ensure t
    :config
    (defun colorize-compilation-buffer ()
      (let ((inhibit-read-only t))
	(ansi-color-apply-on-region (point-min) (point-max))))
    :hook
    ((compilation-filter . colorize-compilation-buffer)))
#+end_src
* duplicate-line
#+begin_src emacs-lisp
  (defun rc/duplicate-line ()
    "Duplicate current line"
    (interactive)
    (let ((column (- (point) (point-at-bol)))
	  (line (let ((s (thing-at-point 'line t)))
		  (if s (string-remove-suffix "\n" s) ""))))
      (move-end-of-line 1)
      (newline)
      (insert line)
      (move-beginning-of-line 1)
      (forward-char column)))

  (global-set-key (kbd "C-,") 'rc/duplicate-line)
#+end_src
* compile
#+begin_src emacs-lisp
  (global-set-key (kbd "<f5>") 'projectile-compile-project)
  (setq compilation-scroll-output t)
  (setq compilation-skip-threshold 2)
  (setq compilation-scroll-output 'first-error)
  (setq compilation-auto-jump-to-first-error t)
#+end_src
* gcmh
emacs garbage collection to stop stuttering on 29.1
#+begin_src emacs-lisp
  (use-package gcmh
    :demand
    :ensure t
    :hook
    (focus-out-hook . gcmh-idle-garbage-collect)

    :custom
    (gcmh-idle-delay 10)
    (gcmh-high-cons-threshold 104857600)

    :config
    (gcmh-mode 1))
#+end_src
* move-text
#+begin_src emacs-lisp
  (use-package move-text
    :ensure t
    :bind
    (("M-p" . move-text-up)
     ("M-n" . move-text-down)))
#+end_src
* languages
** python
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :ensure t
    :hook ((python-mode . pyvenv-mode)))

  (use-package elpy
    :ensure t
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable)
    :custom
    ((python-shell-completion-native-enable nil)
     (elpy-shell-use-project-root t )
     (elpy-rpc-virtualenv-path 'current)
     (elpy-shell-starting-directory 'current-directory)))

  (use-package pyenv-mode
    :ensure t)
#+END_SRC
** latex
#+BEGIN_SRC emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq TeX-save-query nil)
  (setq org-latex-create-formula-image-program 'dvipng)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC
** markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :hook
    ((markdown-mode . turn-on-flyspell))
    :commands
    (markdown-mode gfm-mode)
    :mode
    (("README\\.md\\'" . gfm-mode)
     ("\\.md\\'" . markdown-mode)
     ("\\.markdown\\'" . markdown-mode))
    :custom
    ((markdown-command "multimarkdown")))
#+end_src
** C
#+begin_src emacs-lisp
  (use-package c-ts-mode
    ;; fork of c-ts-mode until my patch gets in
    :load-path "./packages/c-ts-mode"
    :ensure t
    :mode (("\\.c\\'" . c-ts-mode)
	   ("\\.h\\'" . c-ts-mode)
	   ("\\.cc\\'" . c-ts-mode))
    :hook
     ((c-ts-mode . whitespace-handling)
      (c++-ts-mode . whitespace-handling)
      (c-ts-mode . column-number-mode)
      (c++-ts-mode . column-number-mode)
      (c-ts-mode . (lambda () (c-ts-mode-set-style 'linux)))
      (c-ts-mode . (lambda () (c-ts-mode-toggle-comment-style -1))))
     :custom
     ((c-ts-mode-indent-style 'linux)
      (c-ts-mode-indent-offset 8)))
#+end_src
** ada
#+begin_src emacs-lisp
  (use-package ada-mode
    :load-path "./packages/old-ada-mode"
    :ensure t
    :mode
    (("\\.gpr\\'" . ada-mode)
   ("\\.ada\\'" . ada-mode)
   ("\\.ads\\'" . ada-mode)
   ("\\.adb\\'" . ada-mode)))
#+end_src

** vhdl
remove all the annoying compilation jumps
#+begin_src emacs-lisp
(add-to-list 'compilation-error-regexp-alist-alist
             '(ghdl-warning
               "^\\([^:\n]+\\):\\([0-9]+\\):\\([0-9]+\\):warning:"
               1 2 3 1))

(add-to-list 'compilation-error-regexp-alist 'ghdl-warning)

(add-to-list 'compilation-error-regexp-alist-alist
             '(yosys-info-on-colon-num
               "^[A-Z][A-Za-z_ ]+ \\(?:[^:\n]+\\):[0-9]+\\b[^:\n]*\\(warning:\\|error:\\)?"
               nil nil nil 0))

(add-to-list 'compilation-error-regexp-alist-alist
             '(yosys-info-internal-cc
               "^[A-Z][A-Za-z_ ]+ .*\\.cc:[0-9]+:.*$"
               nil nil nil 0))

(add-to-list 'compilation-error-regexp-alist-alist
             '(yosys-info-removed-bits
               "^Removed top [0-9]+ bits .*"
               nil nil nil 0))

(dolist (sym '(yosys-info-on-colon-num yosys-info-internal-cc yosys-info-removed-bits))
  (add-to-list 'compilation-error-regexp-alist sym))


#+end_src
** cpp
#+begin_src emacs-lisp
  (add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
#+end_src
** dts
#+begin_src emacs-lisp
  (use-package dts-mode
    :ensure t)
#+end_src
