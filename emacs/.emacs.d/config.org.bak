* vterm
terminal for emacs
#+BEGIN_SRC emacs-lisp
  (unless (version< emacs-version "27.1")
	  (use-package vterm
	    :ensure t))
#+END_SRC



* languages
** clojure
*requires clojure, clj, lein*
https://purelyfunctional.tv/guide/how-to-install-clojure/#linux
this is magic to me will figure out later
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t
    :mode (("\\.clj\\'" . clojure-mode)
	   ("\\.edn\\'" . clojure-mode))
    :init
    (add-hook 'clojure-mode-hook #'yas-minor-mode)
    (add-hook 'clojure-mode-hook #'linum-mode)
    (add-hook 'clojure-mode-hook #'subword-mode)
    (add-hook 'clojure-mode-hook #'smartparens-mode)
    (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'clojure-mode-hook #'eldoc-mode)
    (add-hook 'clojure-mode-hook #'idle-highlight-mode))
  (use-package cider
    :ensure t
    :defer t
    :init (add-hook 'cider-mode-hook #'clj-refactor-mode)
    :diminish subword-mode
    :config
    (setq nrepl-log-messages t
	  cider-repl-display-in-current-window t
	  cider-repl-use-clojure-font-lock t
	  cider-prompt-save-file-on-load 'always-save
	  cider-font-lock-dynamically '(macro core function var)
	  nrepl-hide-special-buffers t
	  cider-overlays-use-font-lock t)
    (cider-repl-toggle-pretty-printing))
  (use-package clj-refactor
    :ensure t
    :init
    (add-hook 'clojure-mode-hook #'paredit-mode)
    (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'clojure-mode-hook (lambda () (clj-refactor-mode 1))))
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :ensure t
    :hook ((python-mode . pyvenv-mode)))

  (use-package elpy
    :ensure t
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable))

  (setq python-shell-completion-native-enable nil)
  (setq elpy-shell-use-project-root t )
  (setq elpy-rpc-virtualenv-path 'current)

  (setq elpy-shell-starting-directory (quote current-directory))

  (use-package pyenv-mode
    :ensure t)
					  ; set this to whichever you have
  (setenv "WORKON_HOME" "~/.conda/envs")
  (pyvenv-mode 1)
  (use-package company-jedi
    :ensure t
    :config
    (defun my/python-mode-hook ()
      (add-to-list 'company-backends 'company-jedi))
    (add-hook 'python-mode-hook 'my/python-mode-hook))
#+END_SRC
** latex
#+BEGIN_SRC emacs-lisp
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq TeX-save-query nil)
(setq org-latex-create-formula-image-program 'dvipng)
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC
** lisp
#+begin_src emacs-lisp
  (use-package sly-asdf
    :ensure t)
    (use-package sly
      :ensure t)
    (setq inferior-lisp-program "/usr/local/bin/sbcl")
#+end_src
** racket
#+begin_src emacs-lisp
  (use-package racket-mode
	       :ensure t
	       :config
	       (add-hook 'racket-mode-hook #'racket-unicode-input-method-enable)
	       (add-hook 'racket-repl-mode-hook #'racket-unicode-input-method-enable))
#+end_src
** markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src
** verilog
   #+begin_src emacs-lisp
     (use-package verilog-mode
       :ensure t
       :config
	(setq verilog-auto-newline nil))
#+end_src
** C
   #+begin_src emacs-lisp
     (setq c-default-style "linux")
     (add-hook 'c-mode-hook 'lsp)
   #+end_src
** markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src
* line number
#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)
#+end_src
* beamer
#+begin_src emacs-lisp
  (require 'ox-beamer)
(define-key org-mode-map (kbd "C-c >") (lambda () (interactive (org-time-stamp-interactive))))
#+end_src
* reveal
  #+begin_src emacs-lisp
    (use-package ox-reveal
      :ensure t)
      (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
    (setq org-reveal-mathjax t)
    (use-package htmlize
      :ensure t)
  #+end_src
* visual regexp
#+begin_src emacs-lisp
  (use-package visual-regexp
    :ensure t)
#+end_src
* expand region
#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+end_src
* microlisp
#+begin_src emacs-lisp
  (setq ulisp-term-buffer-name "/dev/ttyUSB0")

  (defun ulisp-eval-last-expression-in-term ()
    (interactive)
    (let ((expr (buffer-substring-no-properties
		 (save-excursion (backward-sexp) (point))
		 (point))))
      (with-current-buffer ulisp-term-buffer-name
	(insert expr)
	(term-send-input))))

  (global-set-key (kbd "C-x e") 'ulisp-eval-last-expression-in-term)
  (defun setup-ulisp-workspace ()
    (interactive)

    (split-window-right)
    (other-window 1)

    (serial-term "/dev/ttyUSB0" 9600)
    (term-line-mode)

    (other-window 1))
#+end_src

* tramp
#+begin_src emacs-lisp
(setq tramp-terminal-type "dumb")
#+end_src


* org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory  "~/Notes")
    (org-roam-complete-everywhere t)
    :bind
    (("C-c n l" . org-roam-buffer-toggle)
     ("C-c n f" . org-roam-node-find)
     ("C-c n i" . org-roam-node-insert)
     ("C-c n d t" . org-roam-dailies-goto-today)
     ("C-c n d m" . org-roam-dailies-goto-tomorrow)
     ("C-c n d d" . org-roam-dailies-goto-date)
     :map org-mode-map
     ("C-M-i"   . completion-at-point))
    :config
    (org-roam-setup))
#+end_src
