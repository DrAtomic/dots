* startup
Use-package
#+BEGIN_SRC emacs-lisp
  (package-initialize)
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa" ."https://melpa.org/packages/") t)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
* loadpath
#+begin_src emacs-lisp
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp")
#+end_src
* orgmode
#+begin_src emacs-lisp
  (use-package org
    :ensure t)
#+end_src
** pdf
#+begin_src emacs-lisp
  (push '("\\.pdf\\'" . emacs) org-file-apps)
#+end_src
** bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :init
    (setq org-bullets-bullet-list
	  '( "◉" "●" "○" "•"))
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* theme
#+begin_src emacs-lisp
  (use-package dracula-theme
    :ensure t
    :config
    (load-theme 'dracula t))
  (set-face-attribute 'default nil :font "DejaVu Sans Mono" :height 190)
#+end_src
* projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

* dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents . 5)
			    (projects . 5))))
#+END_SRC
* tmp
set autosave fiels to .tmp folder
#+BEGIN_SRC emacs-lisp
  (setq temporary-file-directory "~/.tmp/")
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))
#+END_SRC
* pretty emacs
remove ugly things and make things pretty
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
  (setq ring-bell-function 'ignore)
  (setq scroll-conservatively 100)
#+END_SRC

* config
visit and reload config
** visit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** todo
#+BEGIN_SRC emacs-lisp
  (defun todo-visit ()
    (interactive)
    (find-file "~/.Todo.org"))
  (global-set-key (kbd "C-c t") 'todo-visit)
#+END_SRC

* window
** split window
split window and follow
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** switch window
#+BEGIN_SRC emacs-lisp
(use-package switch-window
  :ensure t
  :config
  (setq switch-window-input-style 'minibuffer)
  (setq switch-window-increase 4)
  (setq switch-window-threshold 2)
  (setq switch-window-shortcut-style 'qwerty)
  (setq switch-window-qwerty-shortcuts
        '("a" "s" "d" "f" "j" "k" "l"))
  :bind
  ([remap other-window] . switch-window))
#+END_SRC

* which key
lint for emacs
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

* delimiters
** electric pairs
wraps delimiters
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\{ . ?\})
			      (?\[ . ?\])
			      (?\" . ?\")
			      (?\( . ?\))
			      ))
  (electric-pair-mode 1)
#+END_SRC
** rainbow delimiters
   color delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (progn
      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
#+END_SRC
** paren mode
 #+begin_src emacs-lisp
   (show-paren-mode 1)
 #+end_src
** paredit
a bit annoying a bit nice
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook #'paredit-mode)
    ;; enable in the *scratch* buffer
    (add-hook 'lisp-interaction-mode-hook #'paredit-mode)
    (add-hook 'ielm-mode-hook #'paredit-mode)
    (add-hook 'lisp-mode-hook #'paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'paredit-mode)
    (add-hook 'racket-mode-hook 'enable-paredit-mode)
    (add-hook 'scheme-mode-hook #'paredit-mode))
#+END_SRC

* multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind ( "C-c m C-c m" . mc/edit-lines)
    ("C->" . mc/mark-next-like-this)
    ("C-<" . mc/mark-previous-like-this)
    ("C-c m c" . mc/mark-all-like-this))
#+END_SRC
